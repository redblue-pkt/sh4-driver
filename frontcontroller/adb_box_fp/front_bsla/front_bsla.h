/****************************************************************************************
 *
 * front_bsla.h
 *
 * (c) 20?? Freebox
 * (c) 2019 Audioniek
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 *
 *
 * Front panel driver for ADB ITI-5800SX, BSLA and BZZB models;
 * Button, LEDs, and VFD display driver, header file.
 *
 * Devices:
 *  - /dev/vfd (vfd ioctls and read/write function)
 *
 ****************************************************************************************/
#if !defined FRONT_BSLA_H
#define  FRONT_BSLA_H
extern short paramDebug;
#define TAGDEBUG "[front_bsla] "

#ifndef dprintk
#define dprintk(level, x...) do \
{ \
	if ((paramDebug) && (paramDebug >= level)) printk(TAGDEBUG x); \
} while (0)
#endif

#define FPANEL_PORT2_IRQ   88

#define BUTTON_PRESSED     0x04
#define BUTTON_RELEASED    0x00

/*********************/
/* For button driver */
/*********************/
#define PIO2_BASE_ADDRESS    0x18022000
#define PIO2_IO_SIZE         0x1000
#define PIO_CLR_PnC0         0x28
#define PIO_CLR_PnC1         0x38
#define PIO_CLR_PnC2         0x48
#define PIO_SET_PnC0         0x24
#define PIO_SET_PnC1         0x34
#define PIO_SET_PnC2         0x44
#define PIO_PnMASK           0x60
#define PIO_PnCOMP           0x50

#define PIO_SET_PnCOMP       0x54
#define PIO_CLR_PnCOMP       0x58

#define PIO_PnIN             0x10

//#define BUTTON_PIN         0x04 // The input pin of the button is port 5 pin 7

typedef struct
{
	unsigned int pio_addr;
	unsigned char button;
} Global_Status_t;

#define VFD_DISP_SIZE        16
#define VFD_MAJOR            147

#define PIO_PORT_SIZE        0x1000
#define PIO_BASE             0xb8020000
#define STPIO_SET_OFFSET     0x04
#define STPIO_CLEAR_OFFSET   0x08
#define STPIO_POUT_OFFSET    0x00

#define STPIO_SET_PIN(PIO_ADDR, PIN, V) \
	writel(1 << PIN, PIO_ADDR + STPIO_POUT_OFFSET + ((V) ? STPIO_SET_OFFSET : STPIO_CLEAR_OFFSET))
#define PIO_PORT(n) \
	(((n) * PIO_PORT_SIZE) + PIO_BASE)

// PT6302/6958 PIO pin definitions
#define	PORT_STB             1  // PT6958 only
#define PIN_STB              6

#define PORT_CLK             4  // shared
#define PIN_CLK              0

#define PORT_DIN             4  // shared
#define PIN_DIN              1  // also connected to PT6958 Dout

#define PORT_CS              1  // PT6302 only
#define PIN_CS               2

#define PORT_KEY_INT         2
#define PIN_KEY_INT          2

#define IO_Delay             5

// IOCTL definitions
#define VFDDISPLAYCHARS      0xc0425a00
#define VFDBRIGHTNESS        0xc0425a03
#define VFDDISPLAYWRITEONOFF 0xc0425a05
#define VFDDRIVERINIT        0xc0425a08
#define VFDICONDISPLAYONOFF  0xc0425a0a
#define VFDSETLED            0xc0425afe

struct vfd_ioctl_data
{
	unsigned char address;
	unsigned char data[64];
	unsigned char length;
};

/*********************************************
 *
 * Character table for PT6958 7 segment
 * LED display
 *
 * ----a----
 * |       |
 * f       b
 * |       |
 * ----g----
 * |       |
 * e       c
 * |       |
 * ----d---- h
 *
 * segment a is bit 0 -> 00000001 (0x01)
 * segment b is bit 0 -> 00000010 (0x02)
 * segment c is bit 0 -> 00000100 (0x04)
 * segment d is bit 0 -> 00001000 (0x08)
 * segment e is bit 0 -> 00010000 (0x10)
 * segment f is bit 0 -> 00100000 (0x20)
 * segment g is bit 0 -> 01000000 (0x40)
 * segment h is bit 7 -> 10000000 (0x80)
 */
static const unsigned char ROM[128] =
{
	0x00,  //0x00,
	0x00,  //0x01,
	0x00,  //0x02,
	0x00,  //0x03,
	0x00,  //0x04,
	0x00,  //0x05,
	0x00,  //0x06,
	0x00,  //0x07,
	0x00,  //0x08,
	0x00,  //0x09,
	0x00,  //0x0a,
	0x00,  //0x0b,
	0x00,  //0x0c,
	0x00,  //0x0d,
	0x00,  //0x0e,
	0x00,  //0x0f,

	0x00,  //0x10,
	0x00,  //0x11,
	0x00,  //0x12,
	0x00,  //0x13,
	0x00,  //0x14,
	0x00,  //0x15,
	0x00,  //0x16,
	0x00,  //0x17,
	0x00,  //0x18,
	0x00,  //0x19,
	0x00,  //0x1a,
	0x00,  //0x1b,
	0x00,  //0x1c,
	0x00,  //0x1d,
	0x00,  //0x1e,
	0x00,  //0x1f,

	0x00,  //0x20, <space>
	0x86,  //0x21, !
	0x22,  //0x22, "
	0x76,  //0x23, #
	0x6d,  //0x24, $
	0x52,  //0x25, %
	0x7d,  //0x26, &
	0x02,  //0x27, '
	0x39,  //0x28, (
	0x0f,  //0x29, )
	0x76,  //0x2a, *
	0x46,  //0x2b, +
	0x84,  //0x2c, ,
	0x40,  //0x2d, -
	0x80,  //0x2e, .
	0x52,  //0x2f, /

	0x3f,  //0x30, 0
	0x06,  //0x31, 1
	0x5b,  //0x32, 2
	0x4f,  //0x33, 3
	0x66,  //0x34, 4
	0x6d,  //0x35, 5
	0x7d,  //0x36, 6
	0x07,  //0x37, 7
	0x7f,  //0x38, 8
	0x6f,  //0x39, 9
	0x06,  //0x3a, :
	0x86,  //0x3b, ;
	0x58,  //0x3c, <
	0x48,  //0x3d, =
	0x4c,  //0x3e, >
	0xd3,  //0x3f, ?

	0x7b,  //0x40, @
	0x77,  //0x41, A
	0x7c,  //0x42, B
	0x39,  //0x43, C
	0x5e,  //0x44, D
	0x79,  //0x45, E
	0x71,  //0x46, F
	0x3d,  //0x47, G
	0x76,  //0x48, H
	0x06,  //0x49, I
	0x0e,  //0x4a, J
	0x74,  //0x4b, K
	0x38,  //0x4c, L
	0x37,  //0x4d, M
	0x37,  //0x4e, N
	0x3f,  //0x4f, O

	0x73,  //0x50, P
	0xbf,  //0x51, Q
	0x50,  //0x52, R
	0x6d,  //0x53, S
	0x78,  //0x54, T
	0x3e,  //0x55, U
	0x3e,  //0x56, V
	0x3e,  //0x57, W
	0x76,  //0x58, X
	0x6e,  //0x59, Y
	0x5b,  //0x5a, Z
	0x39,  //0x5b  [
	0x30,  //0x5c, |
	0x0f,  //0x5d, ]
	0x23,  //0x5e, ^
	0x08,  //0x5f, _

	0x20,  //0x60, `
	0x5f,  //0x61, a
	0x7c,  //0x62, b
	0x58,  //0x63, c
	0x5e,  //0x64, d
	0x7b,  //0x65, e
	0x71,  //0x66, f
	0x6f,  //0x67, g
	0x74,  //0x68, h
	0x04,  //0x69, i
	0x0e,  //0x6a, j
	0x74,  //0x6b, k
	0x06,  //0x6c, l
	0x54,  //0x6d, m
	0x54,  //0x6e, n
	0x5c,  //0x6f, o

	0x73,  //0x70, p
	0x67,  //0x71, q
	0x50,  //0x72, r
	0x6d,  //0x73, s
	0x78,  //0x74, t
	0x1c,  //0x75, u
	0x1c,  //0x76, v
	0x1c,  //0x77, w
	0x76,  //0x78, x
	0x6e,  //0x79, y
	0x5b,  //0x7a, z
	0x39,  //0x7b, {
	0x64,  //0x7c, backslash
	0x0f,  //0x7d, }
	0x40,  //0x7e, ~
	0x7f,  //0x7f, <DEL>--> all segments on
};

#if 0
static const uint8_t pt6302_007_rom_table[256] =
{
	0x2e,  //0x00, RAM0
	0x8f,  //0x01, RAM1
	0xe4,  //0x02, RAM2
	0xdd,  //0x03, RAM3
	0xdc,  //0x04, RAM4
	0x10,  //0x05, RAM5
	0x10,  //0x06, RAM6
	0x10,  //0x07, RAM7
	0x10,  //0x08,
	0x10,  //0x09,
	0x10,  //0x0a,
	0x10,  //0x0b,
	0x10,  //0x0c,
	0x10,  //0x0d,
	0x10,  //0x0e,
	0x10,  //0x0f,

	0x10,  //0x10, reserved
	0x11,  //0x11, reserved
	0x12,  //0x12, reserved
	0x13,  //0x13, reserved
	0x14,  //0x14, reserved
	0x15,  //0x15, reserved
	0x16,  //0x16, reserved
	0x17,  //0x17, reserved
	0x18,  //0x18, reserved
	0x19,  //0x19, reserved
	0x1a,  //0x1a, reserved
	0x1b,  //0x1b, reserved
	0x1c,  //0x1c, reserved
	0x10,  //0x1d, reserved
	0x10,  //0x1e, reserved
	0x10,  //0x1f, reserved

	0x20,  //0x20, <space>
	0x21,  //0x21, !
	0x22,  //0x22, "
	0x23,  //0x23, #
	0x24,  //0x24, $
	0x25,  //0x25, %
	0x26,  //0x26, &
	0x27,  //0x27, '
	0x28,  //0x28, (
	0x29,  //0x29, )
	0x2a,  //0x2a, *
	0x2b,  //0x2b, +
	0x2c,  //0x2c, ,
	0x2d,  //0x2d, -
	0x2e,  //0x2e, .
	0x2f,  //0x2f, /

	0x30,  //0x30, 0
	0x31,  //0x31, 1
	0x32,  //0x32, 2
	0x33,  //0x33, 3
	0x34,  //0x34, 4
	0x35,  //0x35, 5
	0x36,  //0x36, 6
	0x37,  //0x37, 7
	0x38,  //0x38, 8
	0x39,  //0x39, 9
	0x3a,  //0x3a, :
	0x3b,  //0x3b, ;
	0x3c,  //0x3c, <
	0x3d,  //0x3d, =
	0x3e,  //0x3e, >
	0x3f,  //0x3f, ?

	0x40,  //0x40, @
	0x41,  //0x41, A
	0x42,  //0x42, B
	0x43,  //0x43, C
	0x44,  //0x44, D
	0x45,  //0x45, E
	0x46,  //0x46, F
	0x47,  //0x47, G
	0x48,  //0x48, H
	0x49,  //0x49, I
	0x4a,  //0x4a, J
	0x4b,  //0x4b, K
	0x4c,  //0x4c, L
	0x4d,  //0x4d, M
	0x4e,  //0x4e, N
	0x4f,  //0x4f, O

	0x50,  //0x50, P
	0x51,  //0x51, Q
	0x52,  //0x52, R
	0x53,  //0x53, S
	0x54,  //0x54, T
	0x55,  //0x55, U
	0x56,  //0x56, V
	0x57,  //0x57, W
	0x58,  //0x58, X
	0x59,  //0x59, Y
	0x5a,  //0x5a, Z
	0x5b,  //0x5b, [
	0x5c,  //0x5c, <BACKSLASH>
	0x5d,  //0x5d, ]
	0x5e,  //0x5e, ^
	0x5f,  //0x5f, _

	0x60,  //0x60, `
	0x61,  //0x61, a
	0x62,  //0x62, b
	0x63,  //0x63, c
	0x64,  //0x64, d
	0x65,  //0x65, e
	0x66,  //0x66, f
	0x67,  //0x67, g
	0x68,  //0x68, h
	0x69,  //0x69, i
	0x6a,  //0x6a, j
	0x6b,  //0x6b, k
	0x6c,  //0x6c, l
	0x6d,  //0x6d, m
	0x6e,  //0x6e, n
	0x6f,  //0x6f, o

	0x70,  //0x70, p
	0x71,  //0x71, q
	0x72,  //0x72, r
	0x73,  //0x73, s
	0x74,  //0x74, t
	0x75,  //0x75, u
	0x76,  //0x76, v
	0x77,  //0x77, w
	0x78,  //0x78, x
	0x79,  //0x79, y
	0x7a,  //0x7a, z
	0x7b,  //0x7b, {
	0x7c,  //0x7c, |
	0x7d,  //0x7d, }
	0x7e,  //0x7e, ~
	0x7f,  //0x7f, <DEL>

	0x84,  //0x80, adiaeresis
	0x94,  //0x81, odiaeresis
	0x81,  //0x82, udiaeresis
	0x8e,  //0x83, Adiaeresis
	0x99,  //0x84, Odiaeresis
	0x9a,  //0x85, Udiaeresis
	0xb1,  //0x86, ssharp
	0x10,  //0x87, reserved
	0x10,  //0x88, reserved
	0x10,  //0x89, reserved
	0x10,  //0x8a, reserved
	0x10,  //0x8b, reserved
	0x10,  //0x8c, reserved
	0x10,  //0x8d, reserved
	0x10,  //0x8e, reserved
	0x10,  //0x8f, reserved

	0x10,  //0x90, reserved
	0x10,  //0x91, reserved
	0x10,  //0x92, reserved
	0x10,  //0x93, reserved
	0x10,  //0x94, reserved
	0x10,  //0x95, reserved
	0x10,  //0x96, reserved
	0x10,  //0x97, reserved
	0x10,  //0x98, reserved
	0x10,  //0x99, reserved
	0x10,  //0x9a, reserved
	0x10,  //0x9b, reserved
	0x10,  //0x9c, reserved
	0x10,  //0x9d, reserved
	0x10,  //0x9e, reserved

	0x10,  //0xa0, reserved
	0x10,  //0xa1, reserved
	0x10,  //0xa2, reserved
	0x10,  //0xa3, reserved
	0x10,  //0xa4, reserved
	0x10,  //0xa5, reserved
	0x10,  //0xa6, reserved
	0x10,  //0xa7, reserved
	0x10,  //0xa8, reserved
	0x10,  //0xa9, reserved
	0x10,  //0xaa, reserved
	0x10,  //0xab, reserved
	0x10,  //0xac, reserved
	0x10,  //0xad, reserved
	0x10,  //0xae, reserved
	0x10,  //0xaf, reserved

	0x10,  //0xb0, reserved
	0x10,  //0xb1, reserved
	0x10,  //0xb2, reserved
	0x10,  //0xb3, reserved
	0x10,  //0xb4, reserved
	0x10,  //0xb5, reserved
	0x10,  //0xb6, reserved
	0x10,  //0xb7, reserved
	0x10,  //0xb8, reserved
	0x10,  //0xb9, reserved
	0x10,  //0xba, reserved
	0x10,  //0xbb, reserved
	0x10,  //0xbc, reserved
	0x10,  //0xbd, reserved
	0x10,  //0xbe, reserved
	0x10,  //0xbf, reserved

	0x10,  //0xc0, reserved
	0x10,  //0xc1, reserved
	0x10,  //0xc2, reserved
	0x10,  //0xc3, reserved
	0x10,  //0xc4, reserved
	0x10,  //0xc5, reserved
	0x10,  //0xc6, reserved
	0x10,  //0xc7, reserved
	0x10,  //0xc8, reserved
	0x10,  //0xc9, reserved
	0x10,  //0xca, reserved
	0x10,  //0xcb, reserved
	0x10,  //0xcc, reserved
	0x10,  //0xcd, reserved
	0x10,  //0xce, reserved
	0x10,  //0xcf, reserved

	0x10,  //0xd0, reserved
	0x10,  //0xd1, reserved
	0x10,  //0xd2, reserved
	0x10,  //0xd3, reserved
	0x10,  //0xd4, reserved
	0x10,  //0xd5, reserved
	0x10,  //0xd6, reserved
	0x10,  //0xd7, reserved
	0x10,  //0xd8, reserved
	0x10,  //0xd9, reserved
	0x10,  //0xda, reserved
	0x10,  //0xdb, reserved
	0x10,  //0xdc, reserved
	0x10,  //0xdd, reserved
	0x10,  //0xde, reserved
	0x10,  //0xdf, reserved

	0x10,  //0xe0, reserved
	0x10,  //0xe1, reserved
	0x10,  //0xe2, reserved
	0x10,  //0xe3, reserved
	0x10,  //0xe4, reserved
	0x10,  //0xe5, reserved
	0x10,  //0xe6, reserved
	0x10,  //0xe7, reserved
	0x10,  //0xe8, reserved
	0x10,  //0xe9, reserved
	0x10,  //0xea, reserved
	0x10,  //0xeb, reserved
	0x10,  //0xec, reserved
	0x10,  //0xed, reserved
	0x10,  //0xee, reserved
	0x10,  //0xef, reserved

	0x10,  //0xf0, reserved
	0x10,  //0xf1, reserved
	0x10,  //0xf2, reserved
	0x10,  //0xf3, reserved
	0x10,  //0xf4, reserved
	0x10,  //0xf5, reserved
	0x10,  //0xf6, reserved
	0x10,  //0xf7, reserved
	0x10,  //0xf8, reserved
	0x10,  //0xf9, reserved
	0x10,  //0xfa, reserved
	0x10,  //0xfb, reserved
	0x10,  //0xfc, reserved
	0x10,  //0xfd, reserved
	0x10,  //0xfe, reserved
	0x10,  //0xff, reserved
};
#endif

// Commands to the PT6958
#define DATA_SETCMD                0x40
// Options for DATA_SETCMD
#define TEST_MODE                  0x08
#define ADDR_FIX                   0x04
#define READ_KEYD                  0x02

#define ADDR_SETCMD                0xc0

// Commands to the PT6302
#define DISP_CTLCMD                0x80
// Options for DATA_CTLCMD
#define DISPLAY_ON                 0x08

#define PT6302_COMMAND_DCRAM_WRITE 1
#define PT6302_COMMAND_CGRAM_WRITE 2
#define PT6302_COMMAND_ADRAM_WRITE 3
#define PT6302_COMMAND_SET_PORTS   4

#define PT6302_COMMAND_SET_DUTY    5
// options for PT6302_COMMAND_SET_DUTY
#define PT6302_DUTY_MIN            0
#define PT6302_DUTY_MAX            7

#define PT6302_COMMAND_SET_DIGITS  6
// options for PT6302_COMMAND_SET_DIGITS
#define PT6302_DIGITS_MIN          9
#define PT6302_DIGITS_MAX         16
#define PT6302_DIGITS_OFFSET       8

#define PT6302_COMMAND_SET_LIGHT   7
// options for PT6302_COMMAND_SET_LIGHT
#define PT6302_LIGHT_NORMAL        0
#define PT6302_LIGHT_OFF           1
#define PT6302_LIGHT_ON            3

#define PT6302_COMMAND_TESTMODE    8  // do not use

#endif  // FRONT_BSLA_H
// vim:ts=4
